[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "routers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "get_schema_view",
        "importPath": "drf_yasg.views",
        "description": "drf_yasg.views",
        "isExtraImport": true,
        "detail": "drf_yasg.views",
        "documentation": {}
    },
    {
        "label": "openapi",
        "importPath": "drf_yasg",
        "description": "drf_yasg",
        "isExtraImport": true,
        "detail": "drf_yasg",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "rest_framework",
        "importPath": "django_filters",
        "description": "django_filters",
        "isExtraImport": true,
        "detail": "django_filters",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "store.models",
        "description": "store.models",
        "isExtraImport": true,
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "ProductPagination",
        "importPath": "store.paginations",
        "description": "store.paginations",
        "isExtraImport": true,
        "detail": "store.paginations",
        "documentation": {}
    },
    {
        "label": "ProductFilterSet",
        "importPath": "store.filters",
        "description": "store.filters",
        "isExtraImport": true,
        "detail": "store.filters",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.asgi",
        "description": "project.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\n# DEBUG = True if os.getenv('DEBUG', 'True') == 'True' else False\nDEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')\nif DEBUG:",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "SECRET_KEY = os.getenv('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\n# DEBUG = True if os.getenv('DEBUG', 'True') == 'True' else False\nDEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')\nif DEBUG:\n    ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG', 'True') == 'True'\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')\nif DEBUG:\n    ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(',')\nif DEBUG:\n    ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'django_seed',\n    'store',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "ROOT_URLCONF = 'project.urls'\n# REST_FRAMEWORK = {\n#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n#     'PAGE_SIZE': 10\n# }\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    # ...\n    \"127.0.0.1\",\n    # ...\n]\nWSGI_APPLICATION = 'project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'storedb',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'storedb',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project.settings",
        "description": "project.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project.settings",
        "documentation": {}
    },
    {
        "label": "schema_view",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "schema_view = get_schema_view(\n    openapi.Info(\n        title=\"Store API\",\n        default_version='v1',\n        description=\"Test description\",\n        terms_of_service=\"https://www.google.com/policies/terms/\",\n        contact=openapi.Contact(email=\"contact@snippets.local\"),\n        license=openapi.License(name=\"BSD License\"),\n    ),\n    public=True,",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project.urls",
        "description": "project.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"__debug__/\", include(\"debug_toolbar.urls\")),\n    path('api/', include('store.urls')),\n    path('swagger<format>/', schema_view.without_ui(cache_timeout=0),\n         name='schema-json'),\n    path('swagger/', schema_view.with_ui('swagger',\n         cache_timeout=0), name='schema-swagger-ui'),\n    path('redoc/', schema_view.with_ui('redoc',\n         cache_timeout=0), name='schema-redoc'),",
        "detail": "project.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project.wsgi",
        "description": "project.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0001_initial",
        "description": "store.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "store.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "store.migrations.0002_rename_category_product_category",
        "description": "store.migrations.0002_rename_category_product_category",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('store', '0001_initial'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='product',\n            old_name='Category',\n            new_name='category',\n        ),",
        "detail": "store.migrations.0002_rename_category_product_category",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):  \n    list_display = ['name']\n    search_fields=['name']\n    list_per_page=20\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = ['name', 'price', 'qty', 'category']\n    list_filter=['category']\n    search_fields=['name','category']\n    autocomplete_fields=['category']",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class ProductAdmin(admin.ModelAdmin):\n    list_display = ['name', 'price', 'qty', 'category']\n    list_filter=['category']\n    search_fields=['name','category']\n    autocomplete_fields=['category']\n    list_per_page=20\n@admin.register(Customer)\nclass CustomerAdmin(admin.ModelAdmin):\n    list_display = ['first_name', 'middle_name', 'last_name', 'contact', 'address']\n    list_per_page=20",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "CustomerAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CustomerAdmin(admin.ModelAdmin):\n    list_display = ['first_name', 'middle_name', 'last_name', 'contact', 'address']\n    list_per_page=20\nclass CartItemInline(admin.TabularInline):\n    list_per_page=20\n    model = CartItem\n    extra =2 \n@admin.register(Cart)\nclass CartAdmin(admin.ModelAdmin):\n    list_display = ['customer',]",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "CartItemInline",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CartItemInline(admin.TabularInline):\n    list_per_page=20\n    model = CartItem\n    extra =2 \n@admin.register(Cart)\nclass CartAdmin(admin.ModelAdmin):\n    list_display = ['customer',]\n    list_per_page=20\n    inlines = (CartItemInline,)\n@admin.register(Order)",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "CartAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class CartAdmin(admin.ModelAdmin):\n    list_display = ['customer',]\n    list_per_page=20\n    inlines = (CartItemInline,)\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ['customer','address','payment_status','payment_mode','status']\n    list_editable = ['status']\n    list_filter=['status','payment_mode','payment_status']\n    list_per_page=20",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "store.admin",
        "description": "store.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = ['customer','address','payment_status','payment_mode','status']\n    list_editable = ['status']\n    list_filter=['status','payment_mode','payment_status']\n    list_per_page=20",
        "detail": "store.admin",
        "documentation": {}
    },
    {
        "label": "StoreConfig",
        "kind": 6,
        "importPath": "store.apps",
        "description": "store.apps",
        "peekOfCode": "class StoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'store'",
        "detail": "store.apps",
        "documentation": {}
    },
    {
        "label": "ProductFilterSet",
        "kind": 6,
        "importPath": "store.filters",
        "description": "store.filters",
        "peekOfCode": "class ProductFilterSet(filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = {\n            \"category\": [\"exact\"],\n            \"price\": [\"gte\", \"lte\"],\n        }",
        "detail": "store.filters",
        "documentation": {}
    },
    {
        "label": "SharedModel",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class SharedModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\n# Create your models here.\nclass Category(SharedModel):\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Category(SharedModel):\n    name = models.CharField(max_length=50)\n    def __str__(self):\n        return self.name\nclass Product(SharedModel):\n    name = models.CharField(max_length=50)\n    price = models.PositiveIntegerField()\n    qty = models.PositiveIntegerField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    def __str__(self):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Product(SharedModel):\n    name = models.CharField(max_length=50)\n    price = models.PositiveIntegerField()\n    qty = models.PositiveIntegerField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"{self.name} (price{self.price})\"\nclass Customer(SharedModel):\n    first_name = models.CharField(max_length=50)\n    middle_name = models.CharField(max_length=50, null=True, blank=True)",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Customer(SharedModel):\n    first_name = models.CharField(max_length=50)\n    middle_name = models.CharField(max_length=50, null=True, blank=True)\n    last_name = models.CharField(max_length=50)\n    contact = models.CharField(max_length=10)\n    address = models.CharField(max_length=50)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    def __str__(self):\n        return f\" {self.first_name} {self.middle_name} {self.last_name} {self.address}\"\nclass Cart(SharedModel):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Cart",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Cart(SharedModel):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    def __str__(self):\n        return f\"cart of {self.customer} \"\nclass CartItem(SharedModel):\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    qty = models.PositiveIntegerField()\n    def __str__(self):\n        return self.product",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "CartItem",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class CartItem(SharedModel):\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    qty = models.PositiveIntegerField()\n    def __str__(self):\n        return self.product\n    def __str__(self):\n        return f\"cart of {self.cart.customer} ({self.product}) \"\nclass Order(SharedModel):\n    ORDER_PENDING_CHOICE = \"PENDING\"",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class Order(SharedModel):\n    ORDER_PENDING_CHOICE = \"PENDING\"\n    ORDER_INDELIVERY_CHOICE = \"INDELIVERY\"\n    ORDER_COMPLETED_CHOICE = \"COMPLETED\"\n    ORDER_STATUS = [\n        (ORDER_PENDING_CHOICE, 'PENDING'),\n        (ORDER_INDELIVERY_CHOICE, 'INDELIVERY'),\n        (ORDER_COMPLETED_CHOICE, 'COMPLETED'),\n    ]\n    PAYMENT_MODE_KHALTI = \"KHALTI\"",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "OrderItem",
        "kind": 6,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "class OrderItem(SharedModel):\n    order = models.ForeignKey(Order, on_delete=models.PROTECT)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    qty = models.PositiveIntegerField()\n    price = models.PositiveIntegerField()\n    def __str__(self):\n        return self.product",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "store.models",
        "description": "store.models",
        "peekOfCode": "User = get_user_model()\nclass SharedModel(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\n# Create your models here.\nclass Category(SharedModel):\n    name = models.CharField(max_length=50)\n    def __str__(self):",
        "detail": "store.models",
        "documentation": {}
    },
    {
        "label": "ProductPagination",
        "kind": 6,
        "importPath": "store.paginations",
        "description": "store.paginations",
        "peekOfCode": "class ProductPagination(PageNumberPagination):\n    page_size = 10\n    page_size_query_param = \"size\"",
        "detail": "store.paginations",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "store.serializers",
        "description": "store.serializers",
        "peekOfCode": "class CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = [\n            \"id\",\n            \"name\",\n            \"created_at\",\n            \"updated_at\"\n        ]\n        # fields = \"__all__\"",
        "detail": "store.serializers",
        "documentation": {}
    },
    {
        "label": "ProductSerializer",
        "kind": 6,
        "importPath": "store.serializers",
        "description": "store.serializers",
        "peekOfCode": "class ProductSerializer(serializers.ModelSerializer):\n    category = serializers.StringRelatedField()\n    category_id = serializers.PrimaryKeyRelatedField(\n        queryset=Category.objects.all()\n    )\n    price_with_tax = serializers.SerializerMethodField()\n    class Meta:\n        model = Product\n        fields = [\n            \"id\",",
        "detail": "store.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "router = routers.SimpleRouter()\nrouter.register('categories', CategoryViewSet)\nrouter.register('products', ProductViewSet)\n# using router\nurlpatterns = [\n]+router.urls\n# using viewset\n\"\"\" urlpatterns = [\n    path('categories/', CategoryViewSet.as_view(\n        {",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "store.urls",
        "description": "store.urls",
        "peekOfCode": "urlpatterns = [\n]+router.urls\n# using viewset\n\"\"\" urlpatterns = [\n    path('categories/', CategoryViewSet.as_view(\n        {\n            'get': 'list',\n            'post': 'create',\n        }\n    )",
        "detail": "store.urls",
        "documentation": {}
    },
    {
        "label": "CategoryDetail",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class CategoryDetail(APIView):\n    def get(self, request, pk):\n        category = get_object_or_404(Category, pk=pk)\n        serializer = CategorySerializer(category)\n        return Response(serializer.data)\n    def put(self, request, pk):\n        category = get_object_or_404(Category, pk=pk)\n        serializer = CategorySerializer(category, data=request.data)\n        serializer.is_valid(raise_exception=True)\n        serializer.save()",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "CategoryDetail",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class CategoryDetail(\n        mixins.RetrieveModelMixin,\n        mixins.UpdateModelMixin,\n        mixins.DestroyModelMixin,\n        generics.GenericAPIView\n):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    def get(self, request, pk):\n        return self.retrieve(request, pk)",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "CategoryDetail",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class CategoryDetail(\n        generics.RetrieveUpdateDestroyAPIView\n):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer \"\"\"\n# using viewset\nclass CategoryViewSet(ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass ProductViewSet(ModelViewSet):",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class CategoryViewSet(ModelViewSet):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\nclass ProductViewSet(ModelViewSet):\n    queryset = Product.objects.select_related('category').all()\n    serializer_class = ProductSerializer\n    pagination_class = ProductPagination\n    filter_backends = (filters.DjangoFilterBackend,)\n    filterset_class = ProductFilterSet\n    # filterset_fields = ('category_id',)",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "ProductViewSet",
        "kind": 6,
        "importPath": "store.views",
        "description": "store.views",
        "peekOfCode": "class ProductViewSet(ModelViewSet):\n    queryset = Product.objects.select_related('category').all()\n    serializer_class = ProductSerializer\n    pagination_class = ProductPagination\n    filter_backends = (filters.DjangoFilterBackend,)\n    filterset_class = ProductFilterSet\n    # filterset_fields = ('category_id',)",
        "detail": "store.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]